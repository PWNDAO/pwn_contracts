{
    "language": "Solidity",
    "settings": {
        "evmVersion": "london",
        "libraries": {},
        "metadata": {
            "bytecodeHash": "ipfs"
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "remappings": [
            ":MultiToken/=lib/MultiToken/src/",
            ":ds-test/=lib/forge-std/lib/ds-test/src/",
            ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
            ":forge-std/=lib/forge-std/src/",
            ":multitoken/=lib/MultiToken/src/",
            ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
            ":openzeppelin/=lib/openzeppelin-contracts/contracts/",
            ":pwn/=src/"
        ]
    },
    "sources": {
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
        },
        "lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership} and {acceptOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available all functions\r\n * from parent (Ownable).\r\n */\r\nabstract contract Ownable2Step is Ownable {\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Returns the address of the pending owner.\r\n     */\r\n    function pendingOwner() public view virtual returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        _pendingOwner = newOwner;\r\n        emit OwnershipTransferStarted(owner(), newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual override {\r\n        delete _pendingOwner;\r\n        super._transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev The new owner accepts the ownership transfer.\r\n     */\r\n    function acceptOwnership() public virtual {\r\n        address sender = _msgSender();\r\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\r\n        _transferOwnership(sender);\r\n    }\r\n}\r\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n"
        },
        "src/PWNErrors.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity 0.8.16;\r\n\r\n\r\n/**\r\n * @notice Thrown when an address is missing a PWN Hub tag.\r\n */\r\nerror AddressMissingHubTag(address addr, bytes32 tag);\r\n\r\n/**\r\n * @notice Thrown when a proposal is expired.\r\n */\r\nerror Expired(uint256 current, uint256 expiration);\r\n"
        },
        "src/hub/PWNHub.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity 0.8.16;\r\n\r\nimport { Ownable2Step } from \"openzeppelin/access/Ownable2Step.sol\";\r\n\r\n\r\n/**\r\n * @title PWN Hub\r\n * @notice Connects PWN contracts together into protocol via tags.\r\n */\r\ncontract PWNHub is Ownable2Step {\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # VARIABLES \u0026 CONSTANTS DEFINITIONS                     *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @dev Mapping of address tags. (contract address =\u003e tag =\u003e is tagged)\r\n     */\r\n    mapping (address =\u003e mapping (bytes32 =\u003e bool)) private tags;\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # EVENTS DEFINITIONS                                    *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Emitted when tag is set for an address.\r\n     */\r\n    event TagSet(address indexed _address, bytes32 indexed tag, bool hasTag);\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # ERRORS DEFINITIONS                                    *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Thrown when `PWNHub.setTags` inputs lengths are not equal.\r\n     */\r\n    error InvalidInputData();\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # CONSTRUCTOR                                           *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    constructor() Ownable2Step() {\r\n\r\n    }\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # TAG MANAGEMENT                                        *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Set tag to an address.\r\n     * @dev Tag can be added or removed via this functions. Only callable by contract owner.\r\n     * @param _address Address to which a tag is set.\r\n     * @param tag Tag that is set to an `_address`.\r\n     * @param _hasTag Bool value if tag is added or removed.\r\n     */\r\n    function setTag(address _address, bytes32 tag, bool _hasTag) public onlyOwner {\r\n        tags[_address][tag] = _hasTag;\r\n        emit TagSet(_address, tag, _hasTag);\r\n    }\r\n\r\n    /**\r\n     * @notice Set list of tags to an address.\r\n     * @dev Tags can be added or removed via this functions. Only callable by contract owner.\r\n     * @param _addresses List of addresses to which tags are set.\r\n     * @param _tags List of tags that are set to an `_address`.\r\n     * @param _hasTag Bool value if tags are added or removed.\r\n     */\r\n    function setTags(address[] memory _addresses, bytes32[] memory _tags, bool _hasTag) external onlyOwner {\r\n        if (_addresses.length != _tags.length)\r\n            revert InvalidInputData();\r\n\r\n        uint256 length = _tags.length;\r\n        for (uint256 i; i \u003c length;) {\r\n            setTag(_addresses[i], _tags[i], _hasTag);\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # TAG GETTER                                            *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @dev Return if an address is associated with a tag.\r\n     * @param _address Address that is examined for a `tag`.\r\n     * @param tag Tag that should an `_address` be associated with.\r\n     * @return True if given address has a tag.\r\n     */\r\n    function hasTag(address _address, bytes32 tag) external view returns (bool) {\r\n        return tags[_address][tag];\r\n    }\r\n\r\n}\r\n"
        },
        "src/hub/PWNHubTags.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity 0.8.16;\r\n\r\nlibrary PWNHubTags {\r\n\r\n    string internal constant VERSION = \"1.2\";\r\n\r\n    /// @dev Address can mint LOAN tokens and create LOANs via loan factory contracts.\r\n    bytes32 internal constant ACTIVE_LOAN = keccak256(\"PWN_ACTIVE_LOAN\");\r\n    /// @dev Address can call loan contracts to create and/or refinance a loan.\r\n    bytes32 internal constant LOAN_PROPOSAL = keccak256(\"PWN_LOAN_PROPOSAL\");\r\n    /// @dev Address can revoke nonces on other addresses behalf.\r\n    bytes32 internal constant NONCE_MANAGER = keccak256(\"PWN_NONCE_MANAGER\");\r\n\r\n}\r\n"
        },
        "src/nonce/PWNRevokedNonce.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity 0.8.16;\r\n\r\nimport { PWNHub } from \"pwn/hub/PWNHub.sol\";\r\nimport { PWNHubTags } from \"pwn/hub/PWNHubTags.sol\";\r\nimport { AddressMissingHubTag } from \"pwn/PWNErrors.sol\";\r\n\r\n\r\n/**\r\n * @title PWN Revoked Nonce\r\n * @notice Contract holding revoked nonces.\r\n */\r\ncontract PWNRevokedNonce {\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # VARIABLES \u0026 CONSTANTS DEFINITIONS                     *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Access tag that needs to be assigned to a caller in PWN Hub\r\n     *         to call functions that revoke nonces on behalf of an owner.\r\n     */\r\n    bytes32 public immutable accessTag;\r\n\r\n    /**\r\n     * @notice PWN Hub contract.\r\n     * @dev Addresses revoking nonces on behalf of an owner need to have an access tag in PWN Hub.\r\n     */\r\n    PWNHub public immutable hub;\r\n\r\n    /**\r\n     * @notice Mapping of revoked nonces by an address. Every address has its own nonce space.\r\n     *         (owner =\u003e nonce space =\u003e nonce =\u003e is revoked)\r\n     */\r\n    mapping (address =\u003e mapping (uint256 =\u003e mapping (uint256 =\u003e bool))) private _revokedNonce;\r\n\r\n    /**\r\n     * @notice Mapping of current nonce space for an address.\r\n     */\r\n    mapping (address =\u003e uint256) private _nonceSpace;\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # EVENTS DEFINITIONS                                    *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Emitted when a nonce is revoked.\r\n     */\r\n    event NonceRevoked(address indexed owner, uint256 indexed nonceSpace, uint256 indexed nonce);\r\n\r\n    /**\r\n     * @notice Emitted when a nonce is revoked.\r\n     */\r\n    event NonceSpaceRevoked(address indexed owner, uint256 indexed nonceSpace);\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # ERRORS DEFINITIONS                                    *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Thrown when trying to revoke a nonce that is already revoked.\r\n     */\r\n    error NonceAlreadyRevoked(address addr, uint256 nonceSpace, uint256 nonce);\r\n\r\n    /**\r\n     * @notice Thrown when nonce is currently not usable.\r\n     * @dev Maybe nonce is revoked or not in the current nonce space.\r\n     */\r\n    error NonceNotUsable(address addr, uint256 nonceSpace, uint256 nonce);\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # MODIFIERS                                             *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    modifier onlyWithHubTag() {\r\n        if (!hub.hasTag(msg.sender, accessTag))\r\n            revert AddressMissingHubTag({ addr: msg.sender, tag: accessTag });\r\n        _;\r\n    }\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # CONSTRUCTOR                                           *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    constructor(address _hub, bytes32 _accessTag) {\r\n        accessTag = _accessTag;\r\n        hub = PWNHub(_hub);\r\n    }\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # NONCE                                                 *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Revoke callers nonce in the current nonce space.\r\n     * @param nonce Nonce to be revoked.\r\n     */\r\n    function revokeNonce(uint256 nonce) external {\r\n        _revokeNonce(msg.sender, _nonceSpace[msg.sender], nonce);\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke multiple caller nonces in the current nonce space.\r\n     * @param nonces List of nonces to be revoked.\r\n     */\r\n    function revokeNonces(uint256[] calldata nonces) external {\r\n        for (uint256 i; i \u003c nonces.length; ++i) {\r\n            _revokeNonce(msg.sender, _nonceSpace[msg.sender], nonces[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke caller nonce in a nonce space.\r\n     * @param nonceSpace Nonce space where a nonce will be revoked.\r\n     * @param nonce Nonce to be revoked.\r\n     */\r\n    function revokeNonce(uint256 nonceSpace, uint256 nonce) external {\r\n        _revokeNonce(msg.sender, nonceSpace, nonce);\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke a nonce in the current nonce space on behalf of an owner.\r\n     * @dev Only an address with associated access tag in PWN Hub can call this function.\r\n     * @param owner Owner address of a revoking nonce.\r\n     * @param nonce Nonce to be revoked.\r\n     */\r\n    function revokeNonce(address owner, uint256 nonce) external onlyWithHubTag {\r\n        _revokeNonce(owner, _nonceSpace[owner], nonce);\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke a nonce in a nonce space on behalf of an owner.\r\n     * @dev Only an address with associated access tag in PWN Hub can call this function.\r\n     * @param owner Owner address of a revoking nonce.\r\n     * @param nonceSpace Nonce space where a nonce will be revoked.\r\n     * @param nonce Nonce to be revoked.\r\n     */\r\n    function revokeNonce(address owner, uint256 nonceSpace, uint256 nonce) external onlyWithHubTag {\r\n        _revokeNonce(owner, nonceSpace, nonce);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to revoke a nonce in a nonce space.\r\n     */\r\n    function _revokeNonce(address owner, uint256 nonceSpace, uint256 nonce) private {\r\n        if (_revokedNonce[owner][nonceSpace][nonce]) {\r\n            revert NonceAlreadyRevoked({ addr: owner, nonceSpace: nonceSpace, nonce: nonce });\r\n        }\r\n        _revokedNonce[owner][nonceSpace][nonce] = true;\r\n        emit NonceRevoked(owner, nonceSpace, nonce);\r\n    }\r\n\r\n    /**\r\n     * @notice Return true if owners nonce is revoked in the given nonce space.\r\n     * @dev Do not use this function to check if nonce is usable.\r\n     *      Use `isNonceUsable` instead, which checks nonce space as well.\r\n     * @param owner Address of a nonce owner.\r\n     * @param nonceSpace Value of a nonce space.\r\n     * @param nonce Value of a nonce.\r\n     * @return True if nonce is revoked.\r\n     */\r\n    function isNonceRevoked(address owner, uint256 nonceSpace, uint256 nonce) external view returns (bool) {\r\n        return _revokedNonce[owner][nonceSpace][nonce];\r\n    }\r\n\r\n    /**\r\n     * @notice Return true if owners nonce is usable. Nonce is usable if it is not revoked and in the current nonce space.\r\n     * @param owner Address of a nonce owner.\r\n     * @param nonceSpace Value of a nonce space.\r\n     * @param nonce Value of a nonce.\r\n     * @return True if nonce is usable.\r\n     */\r\n    function isNonceUsable(address owner, uint256 nonceSpace, uint256 nonce) external view returns (bool) {\r\n        if (_nonceSpace[owner] != nonceSpace)\r\n            return false;\r\n\r\n        return !_revokedNonce[owner][nonceSpace][nonce];\r\n    }\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # NONCE SPACE                                           *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Revoke all nonces in the current nonce space and increment nonce space.\r\n     * @dev Caller is used as a nonce owner.\r\n     * @return New nonce space.\r\n     */\r\n    function revokeNonceSpace() external returns (uint256) {\r\n        emit NonceSpaceRevoked(msg.sender, _nonceSpace[msg.sender]);\r\n        return ++_nonceSpace[msg.sender];\r\n    }\r\n\r\n    /**\r\n     * @notice Return current nonce space for an address.\r\n     * @param owner Address of a nonce owner.\r\n     * @return Current nonce space.\r\n     */\r\n    function currentNonceSpace(address owner) external view returns (uint256) {\r\n        return _nonceSpace[owner];\r\n    }\r\n\r\n}\r\n"
        }
    }
}
