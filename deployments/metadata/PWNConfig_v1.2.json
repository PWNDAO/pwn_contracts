{
    "language": "Solidity",
    "settings": {
        "evmVersion": "london",
        "libraries": {},
        "metadata": {
            "bytecodeHash": "ipfs"
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "remappings": [
            ":MultiToken/=lib/MultiToken/src/",
            ":ds-test/=lib/forge-std/lib/ds-test/src/",
            ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
            ":forge-std/=lib/forge-std/src/",
            ":multitoken/=lib/MultiToken/src/",
            ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
            ":openzeppelin/=lib/openzeppelin-contracts/contracts/",
            ":pwn/=src/"
        ]
    },
    "sources": {
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
        },
        "lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership} and {acceptOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available all functions\r\n * from parent (Ownable).\r\n */\r\nabstract contract Ownable2Step is Ownable {\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Returns the address of the pending owner.\r\n     */\r\n    function pendingOwner() public view virtual returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        _pendingOwner = newOwner;\r\n        emit OwnershipTransferStarted(owner(), newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual override {\r\n        delete _pendingOwner;\r\n        super._transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev The new owner accepts the ownership transfer.\r\n     */\r\n    function acceptOwnership() public virtual {\r\n        address sender = _msgSender();\r\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\r\n        _transferOwnership(sender);\r\n    }\r\n}\r\n"
        },
        "lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"../../utils/Address.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it\u0027s common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```solidity\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n *\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall \u0026\u0026 _initialized \u003c 1) || (!Address.isContract(address(this)) \u0026\u0026 _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn\u0027t been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing \u0026\u0026 _initialized \u003c version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized != type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length \u003e 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n"
        },
        "src/config/PWNConfig.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity 0.8.16;\r\n\r\nimport { Ownable2Step } from \"openzeppelin/access/Ownable2Step.sol\";\r\nimport { Initializable } from \"openzeppelin/proxy/utils/Initializable.sol\";\r\n\r\nimport { IPoolAdapter } from \"pwn/interfaces/IPoolAdapter.sol\";\r\nimport { IStateFingerpringComputer } from \"pwn/interfaces/IStateFingerpringComputer.sol\";\r\n\r\n\r\n/**\r\n * @title PWN Config\r\n * @notice Contract holding configurable values of PWN protocol.\r\n * @dev Is intended to be used as a proxy via `TransparentUpgradeableProxy`.\r\n */\r\ncontract PWNConfig is Ownable2Step, Initializable {\r\n\r\n    string internal constant VERSION = \"1.2\";\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # VARIABLES \u0026 CONSTANTS DEFINITIONS                     *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    uint16 public constant MAX_FEE = 1000; // 10%\r\n\r\n    /**\r\n     * @notice Protocol fee value in basis points.\r\n     * @dev Value of 100 is 1% fee.\r\n     */\r\n    uint16 public fee;\r\n\r\n    /**\r\n     * @notice Address that collects protocol fees.\r\n     */\r\n    address public feeCollector;\r\n\r\n    /**\r\n     * @notice Mapping of a loan contract address to LOAN token metadata uri.\r\n     * @dev LOAN token minted by a loan contract will return metadata uri stored in this mapping.\r\n     *      If there is no metadata uri for a loan contract, default metadata uri will be used stored under address(0).\r\n     */\r\n    mapping (address =\u003e string) private _loanMetadataUri;\r\n\r\n    /**\r\n     * @notice Mapping holding registered state fingerprint computer to an asset.\r\n     */\r\n    mapping (address =\u003e address) private _sfComputerRegistry;\r\n\r\n    /**\r\n     * @notice Mapping holding registered pool adapter to a pool address.\r\n     */\r\n    mapping (address =\u003e address) private _poolAdapterRegistry;\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # EVENTS DEFINITIONS                                    *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Emitted when new fee value is set.\r\n     */\r\n    event FeeUpdated(uint16 oldFee, uint16 newFee);\r\n\r\n    /**\r\n     * @notice Emitted when new fee collector address is set.\r\n     */\r\n    event FeeCollectorUpdated(address oldFeeCollector, address newFeeCollector);\r\n\r\n    /**\r\n     * @notice Emitted when new LOAN token metadata uri is set.\r\n     */\r\n    event LOANMetadataUriUpdated(address indexed loanContract, string newUri);\r\n\r\n    /**\r\n     * @notice Emitted when new default LOAN token metadata uri is set.\r\n     */\r\n    event DefaultLOANMetadataUriUpdated(string newUri);\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # ERRORS DEFINITIONS                                    *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Thrown when registering a computer which does not support the asset it is registered for.\r\n     */\r\n    error InvalidComputerContract(address computer, address asset);\r\n\r\n    /**\r\n     * @notice Thrown when trying to set a fee value higher than `MAX_FEE`.\r\n     */\r\n    error InvalidFeeValue(uint256 fee, uint256 limit);\r\n\r\n    /**\r\n     * @notice Thrown when trying to set a fee collector to zero address.\r\n     */\r\n    error ZeroFeeCollector();\r\n\r\n    /**\r\n     * @notice Thrown when trying to set a LOAN token metadata uri for zero address loan contract.\r\n     */\r\n    error ZeroLoanContract();\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # CONSTRUCTOR                                           *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    constructor() Ownable2Step() {\r\n        // PWNConfig is used as a proxy. Use initializer to setup initial properties.\r\n        _disableInitializers();\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function initialize(address _owner, uint16 _fee, address _feeCollector) external initializer {\r\n        require(_owner != address(0), \"Owner is zero address\");\r\n        _transferOwnership(_owner);\r\n        _setFeeCollector(_feeCollector);\r\n        _setFee(_fee);\r\n    }\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # FEE MANAGEMENT                                        *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Set new protocol fee value.\r\n     * @param _fee New fee value in basis points. Value of 100 is 1% fee.\r\n     */\r\n    function setFee(uint16 _fee) external onlyOwner {\r\n        _setFee(_fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal implementation of setting new protocol fee value.\r\n     * @param _fee New fee value in basis points. Value of 100 is 1% fee.\r\n     */\r\n    function _setFee(uint16 _fee) private {\r\n        if (_fee \u003e MAX_FEE)\r\n            revert InvalidFeeValue({ fee: _fee, limit: MAX_FEE });\r\n\r\n        uint16 oldFee = fee;\r\n        fee = _fee;\r\n        emit FeeUpdated(oldFee, _fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Set new fee collector address.\r\n     * @param _feeCollector New fee collector address.\r\n     */\r\n    function setFeeCollector(address _feeCollector) external onlyOwner {\r\n        _setFeeCollector(_feeCollector);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal implementation of setting new fee collector address.\r\n     * @param _feeCollector New fee collector address.\r\n     */\r\n    function _setFeeCollector(address _feeCollector) private {\r\n        if (_feeCollector == address(0))\r\n            revert ZeroFeeCollector();\r\n\r\n        address oldFeeCollector = feeCollector;\r\n        feeCollector = _feeCollector;\r\n        emit FeeCollectorUpdated(oldFeeCollector, _feeCollector);\r\n    }\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # LOAN METADATA                                         *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Set a LOAN token metadata uri for a specific loan contract.\r\n     * @param loanContract Address of a loan contract.\r\n     * @param metadataUri New value of LOAN token metadata uri for given `loanContract`.\r\n     */\r\n    function setLOANMetadataUri(address loanContract, string memory metadataUri) external onlyOwner {\r\n        if (loanContract == address(0))\r\n            // address(0) is used as a default metadata uri. Use `setDefaultLOANMetadataUri` to set default metadata uri.\r\n            revert ZeroLoanContract();\r\n\r\n        _loanMetadataUri[loanContract] = metadataUri;\r\n        emit LOANMetadataUriUpdated(loanContract, metadataUri);\r\n    }\r\n\r\n    /**\r\n     * @notice Set a default LOAN token metadata uri.\r\n     * @param metadataUri New value of default LOAN token metadata uri.\r\n     */\r\n    function setDefaultLOANMetadataUri(string memory metadataUri) external onlyOwner {\r\n        _loanMetadataUri[address(0)] = metadataUri;\r\n        emit DefaultLOANMetadataUriUpdated(metadataUri);\r\n    }\r\n\r\n    /**\r\n     * @notice Return a LOAN token metadata uri base on a loan contract that minted the token.\r\n     * @param loanContract Address of a loan contract.\r\n     * @return uri Metadata uri for given loan contract.\r\n     */\r\n    function loanMetadataUri(address loanContract) external view returns (string memory uri) {\r\n        uri = _loanMetadataUri[loanContract];\r\n        // If there is no metadata uri for a loan contract, use default metadata uri.\r\n        if (bytes(uri).length == 0)\r\n            uri = _loanMetadataUri[address(0)];\r\n    }\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # STATE FINGERPRINT COMPUTER                            *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Returns the state fingerprint computer for a given asset.\r\n     * @param asset The asset for which the computer is requested.\r\n     * @return The computer for the given asset.\r\n     */\r\n    function getStateFingerprintComputer(address asset) external view returns (IStateFingerpringComputer) {\r\n        return IStateFingerpringComputer(_sfComputerRegistry[asset]);\r\n    }\r\n\r\n    /**\r\n     * @notice Registers a state fingerprint computer for a given asset.\r\n     * @param asset The asset for which the computer is registered.\r\n     * @param computer The computer to be registered. Use address(0) to remove a computer.\r\n     */\r\n    function registerStateFingerprintComputer(address asset, address computer) external onlyOwner {\r\n        if (computer != address(0))\r\n            if (!IStateFingerpringComputer(computer).supportsToken(asset))\r\n                revert InvalidComputerContract({ computer: computer, asset: asset });\r\n\r\n        _sfComputerRegistry[asset] = computer;\r\n    }\r\n\r\n\r\n    /*----------------------------------------------------------*|\r\n    |*  # POOL ADAPTER                                          *|\r\n    |*----------------------------------------------------------*/\r\n\r\n    /**\r\n     * @notice Returns the pool adapter for a given pool.\r\n     * @param pool The pool for which the adapter is requested.\r\n     * @return The adapter for the given pool.\r\n     */\r\n    function getPoolAdapter(address pool) external view returns (IPoolAdapter) {\r\n        return IPoolAdapter(_poolAdapterRegistry[pool]);\r\n    }\r\n\r\n    /**\r\n     * @notice Registers a pool adapter for a given pool.\r\n     * @param pool The pool for which the adapter is registered.\r\n     * @param adapter The adapter to be registered.\r\n     */\r\n    function registerPoolAdapter(address pool, address adapter) external onlyOwner {\r\n        _poolAdapterRegistry[pool] = adapter;\r\n    }\r\n\r\n}\r\n"
        },
        "src/interfaces/IPoolAdapter.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity 0.8.16;\r\n\r\n/**\r\n * @title IPoolAdapter\r\n * @notice Interface for pool adapters used to withdraw and supply assets to the pool.\r\n */\r\ninterface IPoolAdapter {\r\n\r\n    /**\r\n     * @notice Withdraw an asset from the pool on behalf of the owner.\r\n     * @dev Withdrawn asset remains in the owner. Caller must have the ACTIVE_LOAN tag in the hub.\r\n     * @param pool The address of the pool from which the asset is withdrawn.\r\n     * @param owner The address of the owner from whom the asset is withdrawn.\r\n     * @param asset The address of the asset to withdraw.\r\n     * @param amount The amount of the asset to withdraw.\r\n     */\r\n    function withdraw(address pool, address owner, address asset, uint256 amount) external;\r\n\r\n    /**\r\n     * @notice Supply an asset to the pool on behalf of the owner.\r\n     * @dev Need to transfer the asset to the adapter before calling this function.\r\n     * @param pool The address of the pool to which the asset is supplied.\r\n     * @param owner The address of the owner on whose behalf the asset is supplied.\r\n     * @param asset The address of the asset to supply.\r\n     * @param amount The amount of the asset to supply.\r\n     */\r\n    function supply(address pool, address owner, address asset, uint256 amount) external;\r\n\r\n}\r\n"
        },
        "src/interfaces/IStateFingerpringComputer.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity 0.8.16;\r\n\r\n/**\r\n * @title IStateFingerpringComputer\r\n * @notice State Fingerprint Computer Interface.\r\n * @dev Contract can compute state fingerprint of several tokens as long as they share the same state structure.\r\n */\r\ninterface IStateFingerpringComputer {\r\n\r\n    /**\r\n     * @notice Compute current token state fingerprint for a given token.\r\n     * @param token Address of a token contract.\r\n     * @param tokenId Token id to compute state fingerprint for.\r\n     * @return Current token state fingerprint.\r\n     */\r\n    function computeStateFingerprint(address token, uint256 tokenId) external view returns (bytes32);\r\n\r\n    /**\r\n     * @notice Check if the computer supports a given token address.\r\n     * @param token Address of a token contract.\r\n     * @return True if the computer supports the token address, false otherwise.\r\n     */\r\n    function supportsToken(address token) external view returns (bool);\r\n\r\n}\r\n"
        }
    }
}
