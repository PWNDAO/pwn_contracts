{
    "language": "Solidity",
    "settings": {
        "evmVersion": "london",
        "libraries": {},
        "metadata": {
            "bytecodeHash": "ipfs"
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "remappings": [
            ":MultiToken/=lib/MultiToken/src/",
            ":ds-test/=lib/forge-std/lib/ds-test/src/",
            ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
            ":forge-std/=lib/forge-std/src/",
            ":multitoken/=lib/MultiToken/src/",
            ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
            ":openzeppelin/=lib/openzeppelin-contracts/contracts/",
            ":pwn/=src/"
        ]
    },
    "sources": {
        "lib/MultiToken/src/MultiTokenCategoryRegistry.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.16;\r\n\r\nimport { Ownable2Step } from \"openzeppelin/access/Ownable2Step.sol\";\r\nimport { ERC165 } from \"openzeppelin/utils/introspection/ERC165.sol\";\r\n\r\nimport { IMultiTokenCategoryRegistry } from \"multitoken/interfaces/IMultiTokenCategoryRegistry.sol\";\r\n\r\n/**\r\n * @title MultiToken Category Registry\r\n * @notice Contract to register known MultiToken Categories for assets.\r\n * @dev Categories are stored as incremented by one to distinguish between 0 category value and category not registered.\r\n */\r\ncontract MultiTokenCategoryRegistry is Ownable2Step, ERC165, IMultiTokenCategoryRegistry {\r\n\r\n    /**\r\n    * @notice A reserved value for a category not registered.\r\n    */\r\n    uint8 public constant CATEGORY_NOT_REGISTERED = type(uint8).max;\r\n\r\n    /**\r\n     * @notice Mapping of assets address to its known category.\r\n     * @dev Categories are incremented by one before being stored to distinguish between 0 category value and category not registered.\r\n     */\r\n    mapping (address =\u003e uint8) private _registeredCategory;\r\n\r\n    /**\r\n    * @notice Thrown when a reserved category value is used to register a category.\r\n    */\r\n    error ReservedCategoryValue();\r\n\r\n    /**\r\n     * @inheritdoc IMultiTokenCategoryRegistry\r\n     */\r\n    function registerCategoryValue(address assetAddress, uint8 category) external onlyOwner {\r\n        if (category == CATEGORY_NOT_REGISTERED)\r\n            revert ReservedCategoryValue(); // Note: to unregister a category, use `unregisterCategory` method.\r\n\r\n        _registeredCategory[assetAddress] = category + 1;\r\n\r\n        emit CategoryRegistered(assetAddress, category);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IMultiTokenCategoryRegistry\r\n     */\r\n    function unregisterCategoryValue(address assetAddress) external onlyOwner {\r\n        delete _registeredCategory[assetAddress];\r\n\r\n        emit CategoryUnregistered(assetAddress);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IMultiTokenCategoryRegistry\r\n     */\r\n    function registeredCategoryValue(address assetAddress) external view returns (uint8) {\r\n        uint8 category = _registeredCategory[assetAddress];\r\n        return category == 0 ? CATEGORY_NOT_REGISTERED : category - 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the contract supports an interface.\r\n     * @param interfaceId The interface identifier, as specified in ERC-165.\r\n     * @return `true` if the contract supports `interfaceId`, `false` otherwise.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return\r\n            interfaceId == type(IMultiTokenCategoryRegistry).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n}\r\n"
        },
        "lib/MultiToken/src/interfaces/IMultiTokenCategoryRegistry.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n* @title MultiToken Category Registry Interface\r\n* @notice Interface for the MultiToken Category Registry.\r\n* @dev Category Registry Interface ID is 0xc37a4a01.\r\n*/\r\ninterface IMultiTokenCategoryRegistry {\r\n\r\n    /**\r\n    * @notice Emitted when a category is registered for an asset address.\r\n    * @param assetAddress Address of an asset to which category is registered.\r\n    * @param category A raw value of a MultiToken Category registered for an asset.\r\n    */\r\n    event CategoryRegistered(address indexed assetAddress, uint8 indexed category);\r\n\r\n    /**\r\n    * @notice Emitted when a category is unregistered for an asset address.\r\n    * @param assetAddress Address of an asset to which category is unregistered.\r\n    */\r\n    event CategoryUnregistered(address indexed assetAddress);\r\n\r\n    /**\r\n     * @notice Register a MultiToken Category value to an asset address.\r\n     * @param assetAddress Address of an asset to which category is registered.\r\n     * @param category A raw value of a MultiToken Category to register for an asset.\r\n     */\r\n    function registerCategoryValue(address assetAddress, uint8 category) external;\r\n\r\n    /**\r\n     * @notice Clear the stored category for the asset address.\r\n     * @param assetAddress Address of an asset to which category is unregistered.\r\n     */\r\n    function unregisterCategoryValue(address assetAddress) external;\r\n\r\n    /**\r\n     * @notice Getter for a registered category value of a given asset address.\r\n     * @param assetAddress Address of an asset to which category is requested.\r\n     * @return Raw category value registered for the asset address.\r\n     */\r\n    function registeredCategoryValue(address assetAddress) external view returns (uint8);\r\n\r\n}\r\n"
        },
        "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
        },
        "lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership} and {acceptOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available all functions\r\n * from parent (Ownable).\r\n */\r\nabstract contract Ownable2Step is Ownable {\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Returns the address of the pending owner.\r\n     */\r\n    function pendingOwner() public view virtual returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        _pendingOwner = newOwner;\r\n        emit OwnershipTransferStarted(owner(), newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual override {\r\n        delete _pendingOwner;\r\n        super._transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev The new owner accepts the ownership transfer.\r\n     */\r\n    function acceptOwnership() public virtual {\r\n        address sender = _msgSender();\r\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\r\n        _transferOwnership(sender);\r\n    }\r\n}"
        },
        "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
        }
    }
}